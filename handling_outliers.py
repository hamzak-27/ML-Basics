# -*- coding: utf-8 -*-
"""handling Outliers

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ioRqhP0MI8Qx2OkW62fTdQMVVnJ63lSF

Outliers are dangerous as well as useful. They affect the linear regression line. also dangerous for Logistic Regression DL and Adaboost.

First approach is Trimming. Very fast but lead to data thinning if too much outliers. 2nd is Capping.

Detecting outliers:
1. If your data is in normal distribution -> then data above mu + 3 sigma and less than mu - 3sigma are outliers.

2. if your data is skewed -> then if data is less than Q1-1.5IQR and greater than Q3+1.5IQR then it is outlier.

Techniques for outlier detection:
1. Z-score treatement
2. IQR based filtering
3. Percentile
4. Winsorization

Z-SCORE TREATEMENT

lower limit -> mu - 3*sigma
upper limit -> mu + 3*sigma

Now if your data had 1000 columns and 5 columns are outlier detected then now you have total 995 columns.
and capping me we put a cap on the outliers. Means for these range of values this cap value will be assigned.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("https://raw.githubusercontent.com/campusx-official/100-days-of-machine-learning/main/day42-outlier-removal-using-zscore/placement.csv")

df.head()
df.shape

#Use visuaization from matplotlib to see the distributions of the columns an =d if it is normal then apply on that column
#Then find the boundary values that is the lower and upper limit.
df['cgpa'].mean() + 3*df['cgpa'].std()
# find also lower limit

#Now just find the values offending the boundary values
df[(df['cgpa']>8.80) | (df['cgpa']<5.11)]
#So now we get the outliers of cgpa column

"""TRIMMING"""

new_df = df[(df['cgpa']<8.80)| (df['cgpa']>5.11)]
new_df

#calculating zscore
df['cgpa_zscore'] = (df['cgpa'] - df['cgpa'].mean())/df['cgpa'].std()

df.head()

#abhi unhi values ko rakhna hai jinka zscore is in range betw -3 and 3 and inke baahar hai toh outliers hai
df[(df['cgpa_zscore']>3) | (df['cgpa_zscore']<-3)]

#Trimming
new_df = df[(df['cgpa_zscore']<3) & (df['cgpa_zscore']>-3)]

new_df # and you can see there are 995 columns bcoz 5 out of 1000 were outliers

"""CAPPING"""

upper_limit = df['cgpa'].mean() + 3*df['cgpa'].std()
lower_limit = df['cgpa'].mean() - 3*df['cgpa'].std()
#we calculated the upper and lower limit

#np.where takes 3 args . ist is the condition 2nd is if condition true then execute this and 3rd for false
df['cgpa'] = np.where(
    df['cgpa']>upper_limit,
    upper_limit,
    np.where(
        df['cgpa']<lower_limit,
        lower_limit,
        df['cgpa']
    )
)

df['cgpa'].describe()
#we see the min value is 5.11 which is the lower limit...same for upper limit

"""This was only if data is in normal distribution"""